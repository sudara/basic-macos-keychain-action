name: tests

# IMPORTANT: To remain secure for self-hosted runners
# We disallow `pull_request` here
on:
  push:

defaults:
  run:
    shell: bash

jobs:
  test-no-cert:
    name: TEST inputs ${{ matrix.name }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - name: (hosted)
            os: macos-latest
          - name: (self-hosted)
            os: self-hosted
    steps:
      - uses: sudara/basic-macos-keychain-action@main
        id: import
        continue-on-error: true # assume fail, let us run the upcoming step
        with:
          dev-id-app-cert: ""
          dev-id-app-password: ""

      - name: Check an error occurs when empty secret provided
        run: |
          if [ "${{ steps.import.outcome }}" == "success" ]; then
            echo "::error::Test step succeeded but should have failed"
            exit 1
          else
          echo "Test step failed as expected"
          fi

  test-keychain:
    name: TEST Keychain create ${{ matrix.name }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - name: (hosted)
            os: macos-latest
          - name: (self-hosted)
            os: self-hosted
    steps:
      - uses: sudara/basic-macos-keychain-action@main
        id: import
        with:
          dev-id-app-cert: ${{ secrets.DEVELOPER_ID_APP_CERT }}
          dev-id-app-password: ${{ secrets.DEVELOPER_ID_APP_PASSWORD }}

      - name: Check a github-action* keychain exists
        run: |
          if [ ! -e "$HOME/Library/Keychains/github-action"*.keychain-db ]; then
           echo "::error:: No matching github-action* keychain files exist"
           exit 1
          fi

      - name: Check the specific keychain exists
        run: |
          if [ ! -f "${{ steps.import.outputs.keychain-path }}" ]; then
            echo "::error::Keychain not created"
            exit 1
          else
            echo "Keychain created"
          fi

  test-sign:
    name: TEST Sign ${{ matrix.name }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - name: (hosted)
            os: macos-latest
          - name: (self-hosted)
            os: self-hosted

    steps:
      - uses: sudara/basic-macos-keychain-action@main
        id: import
        with:
          dev-id-app-cert: ${{ secrets.DEVELOPER_ID_APP_CERT }}
          dev-id-app-password: ${{ secrets.DEVELOPER_ID_APP_PASSWORD }}

      - name: Verify an unsigned file
        id: unsigned
        continue-on-error: true # we expect this to
        run: |
          TEMP_FILE=$(mktemp)
          echo "temp_file=$TEMP_FILE" >> $GITHUB_OUTPUT
          codesign --verify -v $TEMP_FILE

      - name: Verify unsigned
        run: |
          if [ "${{ steps.unsigned.outcome }}" == "success" ]; then
            echo "::error::Test step succeeded but should have failed"
            exit 1
          else
          echo "Test step failed as expected"
          fi

      - name: Verify a signed file
        run: |
          codesign --force --sign "${{ secrets.DEVELOPER_ID_APPLICATION }}" ${{ steps.unsigned.outputs.temp_file }} -v --deep --strict --options=runtime --timestamp
          codesign --verify -v ${{ steps.unsigned.outputs.temp_file }}
          if [ $? -ne 0 ]; then
            echo "Code signing verification failed"
            rm ${{ steps.unsigned.outputs.temp_file }}
            exit 1
          fi
          rm ${{ steps.unsigned.outputs.temp_file }}

  test-cleanup:
    if: ${{ always() }}
    name: TEST Cleanup ${{ matrix.name }}
    runs-on: ${{ matrix.os }}
    needs: test-sign
    strategy:
      matrix:
        include:
          - name: (hosted)
            os: macos-latest
          - name: (self-hosted)
            os: self-hosted
    steps:
      - name: Ensure no github-action* keychain exists
        run: |
          if [ -e "$HOME/Library/Keychains/github-action"*.keychain-db ]; then
           echo "::error:: Matching github-action* keychain files present"
           exit 1
          fi
