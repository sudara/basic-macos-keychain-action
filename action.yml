# action.yml
name: 'Basic macOS Certificate Import'
description: 'Safely imports certificates into a temporary keychain without modifying system defaults'
author: 'sudara'
branding:
  icon: 'lock'
  color: 'green'

inputs:
  dev-id-app-cert:
    description: 'Base64-encoded PKCS12 file with the Developer ID Application certificate'
    required: true
  dev-id-app-password:
    description: 'Password for the dev-id-app-cert PKCS12 file'
    required: true
  dev-id-installer-cert:
    description: 'Base64-encoded PKCS12 file with the Developer ID Installer certificate'
    required: false
  dev-id-installer-password:
    description: 'Password for the dev-id-installer-cert PKCS12 file'
    required: false
  keychain-name:
    description: 'Name for the temporary keychain'
    default: github-action-${{ github.job }}-${{ github.run_id }}-${{ github.run_number }}-${{ github.run_attempt }}

outputs:
  keychain-path:
    description: 'Path to the temporary keychain with imported cert'
    value: ${{ steps.import-cert.outputs.keychain-path }}


runs:
  using: 'composite'
  steps:
    - name: Check DEV_ID_APP_CERT
      shell: bash
      if: inputs.dev-id-app-cert == ''
      run: |
        echo "::error::Missing required input 'dev-id-app-cert'"
        exit 1

    - name: Check DEV_ID_APP_PASSWORD
      shell: bash
      if: inputs.dev-id-app-password == ''
      run: |
        echo "::error::Missing required secret 'dev-id-app-password'"
        exit 1

    - id: setup-keychain
      shell: bash
      run: |
        # Set up keychain path
        KEYCHAIN_PATH="$HOME/Library/Keychains/${{ inputs.keychain-name }}.keychain-db"
        KEYCHAIN_PASSWORD="$(openssl rand -base64 12)"
        echo "::add-mask::$KEYCHAIN_PASSWORD"

        # Create new keychain (without making it default)
        security create-keychain -p "$KEYCHAIN_PASSWORD" "$KEYCHAIN_PATH"

        # Unlock it for use
        security unlock-keychain -p "$KEYCHAIN_PASSWORD" "$KEYCHAIN_PATH"

        # Set output for cleanup
        echo "keychain-path=$KEYCHAIN_PATH" >> $GITHUB_OUTPUT
        echo "keychain-password=$KEYCHAIN_PASSWORD" >> $GITHUB_OUTPUT

    - id: import-app-cert
      shell: bash
      run: |
        # Write cert to temp file
        DEV_ID_APPLICATION=$(mktemp)
        echo '${{ inputs.dev-id-app-cert }}' | base64 -d > "$DEV_ID_APPLICATION"

        # Import cert to our specific keychain
        security import "$DEV_ID_APPLICATION" -f pkcs12 -k "${{ steps.setup-keychain.outputs.keychain-path }}" -P "${{ inputs.dev-id-app-password }}" -T /usr/bin/codesign -T /usr/bin/security

        # Clean up temp files
        rm "$DEV_ID_APPLICATION"

    - id: import-install-cert
      if: inputs.dev-id-installer-cert != ''
      shell: bash
      run: |
        # Write cert to temp file
        DEV_ID_INSTALLER=$(mktemp)
        echo '${{ inputs.dev-id-installer-cert }}' | base64 -d > "$DEV_ID_INSTALLER"

        # Import cert to our specific keychain
        security import "$DEV_ID_INSTALLER" -f pkcs12 -k "${{ steps.setup-keychain.outputs.keychain-path }}" -P "${{ inputs.dev-id-installer-password }}" -T /usr/bin/codesign -T /usr/bin/security

        # Clean up temp files
        rm "$DEV_ID_INSTALLER"

    - id: enable-keychain
      shell: bash
      run: |
        # Ensures codesign will not need a password prompt for this particular keychain
        security set-key-partition-list -S apple-tool:,apple: -s -k "${{ steps.setup-keychain.outputs.keychain-password }}" "${{ steps.setup-keychain.outputs.keychain-path }}"

        # Add keychain to keychain list (without changing default)
        security list-keychains -d user -s "${{ steps.setup-keychain.outputs.keychain-path }}" $(security list-keychains -d user | xargs)

    # Needed until GA supports post-run steps in composite actions
    # https://github.com/actions/runner/issues/1478
    - name: Cleanup
      uses: gacts/run-and-post-run@v1
      with:
        post: |
          # Remove the keychain from the list
          security list-keychains -d user -s $(security list-keychains -d user | grep -v "${{ steps.setup-keychain.outputs.keychain-path }}" | xargs)

          # Delete the keychain
          security delete-keychain "${{ steps.setup-keychain.outputs.keychain-path }}"
